package wtf.monsoon.client.modules.exploit.disabler

import me.bush.eventbuskotlin.EventListener
import me.bush.eventbuskotlin.listener
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C07PacketPlayerDigging
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement
import net.minecraft.network.play.client.C0BPacketEntityAction
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing
import wtf.monsoon.backend.module.MulticlassModule
import wtf.monsoon.backend.module.mode.ModuleMode
import wtf.monsoon.backend.setting.Setting
import wtf.monsoon.client.event.EventPacket
import wtf.monsoon.client.event.EventPreMotion
import wtf.monsoon.client.modules.exploit.Disabler
import wtf.monsoon.client.util.misc.Stopwatch
import wtf.monsoon.client.util.network.PacketUtil
import java.util.concurrent.LinkedBlockingQueue
import wtf.monsoon.client.util.math.randomNumber

class VulcanDisabler(name: String, parent: MulticlassModule) : ModuleMode<Disabler>(name, parent) {

    private var enableCombatDisabler = Setting("Combat Disabler", true)
    private var enableStrafeDisabler = Setting("Strafe Disabler", false)

    init {
        this.registerSettings(enableCombatDisabler, enableStrafeDisabler)
    }

    private val packets = LinkedBlockingQueue<Packet<*>>();
    private val lagTimer: Stopwatch = Stopwatch()
    private val conTimer: Stopwatch = Stopwatch()

    private var currentDelay: Long = 5000
    private var currentBuffer: Long = 0
    private var currentDec: Long = 0
    private var packetCount: Int = 0

    override fun enable() {
        super.enable()
        this.updateLagTime()
        this.packetCount = 0
    }

    override fun disable() {
        super.disable()
    }

    @EventListener
    val eventPacket = fun(e: EventPacket) {
        if(this.enableCombatDisabler.getValue()) {
            if (e.packet is C0FPacketConfirmTransaction) {
                val packet = e.packet as C0FPacketConfirmTransaction
                val transUID = packet.uid.toInt()
                if (transUID >= -25767 && transUID <= -24769) {
                    this.packets.add(packet)
                    e.cancel()
                } else if (transUID == -30000) {
                    this.packets.add(packet)
                    e.cancel()
                } else if (transUID >= -25767) {
                    this.packets.add(packet)
                    e.cancel()
                }
            }

            if (e.packet is C0BPacketEntityAction) {
                e.cancel()
            }
        }

        if(this.enableStrafeDisabler.getValue()) {
            if(e.packet is C03PacketPlayer) {
                if(mc.thePlayer.ticksExisted > 15) {
                    this.packetCount++
                    if((e.packet as C03PacketPlayer).isMoving) {
                        if(this.packetCount >= 6) {
                            PacketUtil.sendPacketNoEvent(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, BlockPos.ORIGIN, EnumFacing.DOWN))
                            this.packetCount = 0
                        } else if(this.packetCount == 4) {
                            PacketUtil.sendPacketNoEvent(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, BlockPos.ORIGIN, EnumFacing.DOWN))
                        } else if(this.packetCount == 2) {
                            PacketUtil.sendPacketNoEvent(C08PacketPlayerBlockPlacement(BlockPos.ORIGIN, 0, mc.thePlayer.itemInUse, 1f, 1f, 1f))
                        }
                    }
                }
            }
        }
    }

    @EventListener
    val preMotion = fun(e: EventPreMotion) {
        if(this.enableCombatDisabler.getValue()) {
            if (mc.thePlayer.ticksExisted < 5) {
                this.packets.clear()
                this.updateLagTime()
            }
            if (this.lagTimer.hasTimeElapsed(this.currentDelay) && packets.size > this.currentBuffer) {
                this.updateLagTime()
                while (packets.size > this.currentBuffer) {
                    PacketUtil.sendPacketNoEvent(packets.poll())
                }
            }
            if (this.conTimer.hasTimeElapsed(this.currentDec) && this.currentDec > 0 && !packets.isEmpty()) {
                PacketUtil.sendPacketNoEvent(packets.poll())
                this.conTimer.reset()
            }
        }

        if(this.enableStrafeDisabler.getValue()) {
            if(mc.thePlayer.ticksExisted <= 1) {
                this.packetCount = 0
            }
        }
    }

    private fun updateLagTime() {
        if(this.enableCombatDisabler.getValue()) {
            this.conTimer.reset()
            this.lagTimer.reset()
            this.currentDelay = randomNumber(5500, 4500).toLong()
            this.currentDec = 1500
            this.currentBuffer = 5
        }
    }
}