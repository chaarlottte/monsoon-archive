package wtf.monsoon.client.modules.exploit.disabler

import me.bush.eventbuskotlin.EventListener
import me.bush.eventbuskotlin.listener
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import wtf.monsoon.Wrapper
import wtf.monsoon.backend.module.MulticlassModule
import wtf.monsoon.backend.module.mode.ModuleMode
import wtf.monsoon.backend.setting.Setting
import wtf.monsoon.client.event.EventPacket
import wtf.monsoon.client.event.EventPreMotion
import wtf.monsoon.client.modules.exploit.Disabler
import wtf.monsoon.client.util.misc.Stopwatch
import wtf.monsoon.client.util.network.PacketSleepThread
import java.util.concurrent.LinkedBlockingQueue

class NegativityDisabler(name: String, parent: MulticlassModule) : ModuleMode<Disabler>(name, parent) {

    var mode = Setting("Mode", Mode.PING)

    init {
        this.registerSettings(mode)
    }

    private val packets = LinkedBlockingQueue<Packet<*>>();
    private val timer: Stopwatch = Stopwatch()

    override fun enable() {
        super.enable()
    }

    override fun disable() {
        super.disable()
        Wrapper.monsoon.packetHandler.enablePingSpoof = false
    }

    @EventListener
    val eventPacket = fun(e: EventPacket) {
        when(this.mode.getValue()) {
            Mode.ADVANCED -> {
                if (e.packet is C0FPacketConfirmTransaction) {
                    val packet = e.packet as C0FPacketConfirmTransaction
                    if (packet.uid.toInt() != -1) {
                        e.cancel()
                        this.packets.add(e.packet)
                    }
                }
            }
            Mode.PING -> {}
        }
    }

    @EventListener
    val preMotion = fun(_: EventPreMotion) {
        when(this.mode.getValue()) {
            Mode.ADVANCED -> {
                if (this.timer.hasTimeElapsed(500)) {
                    if (packets.size <= 50) {
                        if (!packets.isEmpty()) {
                            packets.poll()
                        }
                    } else {
                        for (i in 0..9) {
                            packets.poll()
                        }
                    }
                    this.timer.reset()
                }
            }
            Mode.PING -> {
                Wrapper.monsoon.packetHandler.enablePingSpoof = true
                Wrapper.monsoon.packetHandler.pingSpoofDelay = 200
            }
        }
    }

    enum class Mode {
        PING,
        ADVANCED
    }
}