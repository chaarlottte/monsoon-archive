package wtf.monsoon.impl.module.exploit;

import io.github.nevalackin.homoBus.Listener;
import io.github.nevalackin.homoBus.annotations.EventLink;
import io.netty.buffer.Unpooled;
import lombok.Getter;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.login.INetHandlerLoginServer;
import net.minecraft.network.login.client.C00PacketLoginStart;
import net.minecraft.network.login.client.C01PacketEncryptionResponse;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S40PacketDisconnect;
import net.minecraft.network.status.client.C00PacketServerQuery;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.potion.Potion;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.Vec3;
import wtf.monsoon.Wrapper;
import wtf.monsoon.api.module.Category;
import wtf.monsoon.api.module.Module;
import wtf.monsoon.api.setting.Setting;
import wtf.monsoon.api.util.entity.PlayerUtil;
import wtf.monsoon.api.util.misc.*;
import wtf.monsoon.impl.event.EventPacket;
import wtf.monsoon.impl.event.EventPacket.Direction;
import wtf.monsoon.impl.event.EventPreMotion;
import wtf.monsoon.impl.module.combat.Aura;
import wtf.monsoon.impl.module.movement.Speed;
import wtf.monsoon.impl.module.player.Scaffold;

import java.util.ArrayList;
import java.util.concurrent.LinkedBlockingQueue;

public class Disabler extends Module {

    @Getter
    private final Setting<Mode> mode = new Setting<>("Mode", Mode.WATCHDOG)
            .describedBy("What anticheat to disable");
    @Getter
    private final Setting<Boolean> omniSprintDisabler = new Setting<>("Omni Sprint Disabler", false)
            .describedBy("Whether to attempt to disable Omni Sprint checks on Watchdog.")
            .visibleWhen(() -> mode.getValue() == Mode.WATCHDOG || mode.getValue() == Mode.EXPERIMENTAL);

    @Getter
    private final Setting<Long> negativityPingNum = new Setting<>("Packet Delay", 600L)
            .minimum(100L)
            .maximum(1500L)
            .incrementation(1L)
            .visibleWhen(() -> mode.getValue() == Mode.NEGATIVITY);

    private final ArrayList<Packet<?>> fakeLagPackets = new ArrayList<>();
    private LinkedBlockingQueue<Packet<?>> packets = new LinkedBlockingQueue<>(), startPackets = new LinkedBlockingQueue<>();

    private boolean canBlink;
    private final Timer hypixelTimer = new Timer();
    private final Timer keepAlivePulseTimer = new Timer();

    private final Timer negativityTimer = new Timer();

    private final Timer timerCancelDelay = new Timer();
    private final Timer timerCancelTimer = new Timer();

    private final Timer lagTimer = new Timer(), conTimer = new Timer();

    private int c0cs, nextTicks;

    private long currentDelay = 5000, currentBuffer, currentDec;

    public Disabler() {
        super("Disabler", "Disable parts of anticheats.", Category.EXPLOIT);
        this.setMetadata(() -> StringUtil.formatEnum(mode.getValue()));
    }

    @Override
    public void onEnable() {
        super.onEnable();
        fakeLagPackets.clear();
        hypixelTimer.reset();
        keepAlivePulseTimer.reset();
        packets.clear();
        startPackets.clear();
        timerCancelTimer.reset();
        timerCancelDelay.reset();
        lagTimer.reset();
        conTimer.reset();
        negativityTimer.reset();
        this.packets.clear();
        this.updateLagTime();

        c0cs = 0;
        nextTicks = 10;
    }

    @EventLink
    public Listener<EventPacket> eventPacketListener = e -> {
        if(mc.thePlayer == null || mc.theWorld == null) return;
        switch (mode.getValue()) {
            case WATCHDOG:
                if (e.getPacket() instanceof S08PacketPlayerPosLook)
                    if(mc.getNetHandler().doneLoadingTerrain && !this.canBlink)
                        this.canBlink = true;
                    else if(!mc.getNetHandler().doneLoadingTerrain)
                        this.canBlink = false;

                if(e.getDirection() != Direction.SEND)
                    return;

                if(mc.thePlayer == null || mc.thePlayer.ticksExisted < 10) {
                    this.packets.clear();
                    this.canBlink = true;
                    return;
                }

                if(this.canBlink) {
                    if(!(e.getPacket().getClass().getGenericSuperclass() instanceof INetHandlerLoginServer)) {
                        e.setCancelled(true);
                        this.packets.add(e.getPacket());
                    } else {
                        System.out.println(e.getPacket().getClass().getName());
                    }
                } else {
                    if(e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof C0FPacketConfirmTransaction) {
                        e.setCancelled(true);
                        this.packets.add(e.getPacket());
                    }
                }
            	break;
            case EXPERIMENTAL:
                if(mc.thePlayer.ticksExisted < 10) {
                    if(!canBlink) {
                        packets.clear();
                        canBlink = true;
                    }
                }

                if(e.getDirection() == Direction.SEND) {
                    if(e.getPacket() instanceof C17PacketCustomPayload) {
                        C17PacketCustomPayload packet = (C17PacketCustomPayload) e.getPacket();

                        String lunar = "Lunar-Client";

                        packet.setChannel("REGISTER");
                        packet.setData(new PacketBuffer(Unpooled.wrappedBuffer(lunar.getBytes())));
                    }

                    if(omniSprintDisabler.getValue()) {
                        if(e.getPacket() instanceof C0BPacketEntityAction) {
                            C0BPacketEntityAction packet = (C0BPacketEntityAction) e.getPacket();
                            if(packet.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || packet.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                                e.setCancelled(true);
                                return;
                            }
                        }
                    }

                    if(canBlink || (e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof C0FPacketConfirmTransaction)) {
                        e.setCancelled(true);
                        packets.add(e.getPacket());
                    }
                }
                break;
            case CUBECRAFT:
                if(e.getPacket() instanceof C0BPacketEntityAction) {
                    C0BPacketEntityAction packet = (C0BPacketEntityAction) e.getPacket();
                    if(packet.getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                       packet.setAction(C0BPacketEntityAction.Action.STOP_SPRINTING);
                    }
                }
                break;
            case TUBNET:
                break;
            case PIT:
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    packets.add(e.getPacket());
                    e.setCancelled(true);
                }
                break;
            case GHOSTLY:
                if (e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    e.setCancelled(true);
                    new PacketSleepThread(e.getPacket(), 3500).start();
                }
                break;
            case VERUS:
                if (e.getPacket() instanceof C0FPacketConfirmTransaction && mc.thePlayer.ticksExisted > 20)
                    e.setCancelled(true);
                if (e.getPacket() instanceof C00PacketKeepAlive && mc.thePlayer.ticksExisted > 20) e.setCancelled(true);
                break;
            case VULCAN_COMBAT:
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) e.getPacket();
                    int transUID = packet.uid;
                    if (transUID >= -25767 && transUID <= -24769) {
                        packets.add(packet);
                        e.setCancelled(true);
                    } else if (transUID == -30000){
                        packets.add(packet);
                        e.setCancelled(true);
                    } else if (transUID >= -25767) {
                        packets.add(packet);
                        e.setCancelled(true);
                    }
                }

                if(e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCancelled(true);
                }

                if(e.getPacket() instanceof C03PacketPlayer) {
                    if(mc.thePlayer.ticksExisted > 15) {
                        this.c0cs++;
                        if(((C03PacketPlayer) e.getPacket()).isMoving()) {
                            if(this.c0cs >= 6) {
                                PacketUtil.sendPacketNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, BlockPos.ORIGIN, EnumFacing.DOWN));
                                this.c0cs = 0;
                            } else if(this.c0cs == 4) {
                                PacketUtil.sendPacketNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, BlockPos.ORIGIN, EnumFacing.DOWN));
                            }
                        }
                    }

                    if(!Wrapper.getModule(Scaffold.class).isEnabled() && Wrapper.getModule(Aura.class).getTarget() == null)
                        mc.playerController.onPlayerRightClick(mc.thePlayer, mc.theWorld, mc.thePlayer.getHeldItem(), BlockPos.ORIGIN, EnumFacing.DOWN, new Vec3(0, 0, 0));
                        // PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ), 0, mc.thePlayer.getHeldItem(), 0.0f, (float) Math.random() / 5f, 0.0f));
                }
                break;
            case NEGATIVITY_PING:
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    e.setCancelled(true);
                    new PacketSleepThread(e.getPacket(), 220).start();
                }

                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                    new PacketSleepThread(e.getPacket(), 220).start();
                }

                /*if(e.getPacket() instanceof C03PacketPlayer) {
                    if(e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                        C03PacketPlayer.C06PacketPlayerPosLook packet = (C03PacketPlayer.C06PacketPlayerPosLook) e.getPacket();
                        e.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(
                                packet.getX(),
                                packet.getY(),
                                packet.getZ(),
                                packet.isOnGround()
                        ));
                    } else {
                        C03PacketPlayer packet = (C03PacketPlayer) e.getPacket();
                        if(mc.thePlayer.onGround) {
                            //packet.setOnGround(mc.thePlayer.ticksExisted % 2 == 0);
                        }
                    }
                }*/
                break;
            case NEGATIVITY:
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) e.getPacket();

                    // PlayerUtil.sendClientMessage("C0F UID: " + packet.getUid());
                    //LogUtil.logToConsole("Uid : " + packet.getUid());

                    if(packet.getUid() != -1) {
                        e.setCancelled(true);
                        this.packets.add(e.getPacket());
                    }
                    // PlayerUtil.sendClientMessage("Queue size: " + this.packets.size());
                    //Vestige.getInstance().addChatMessage("Packets Queue : " + packetsQueue.size());
                }
                break;
        }
    };

    @EventLink
    public Listener<EventPreMotion> eventPreMotionListener = e -> {
        switch (mode.getValue()) {
            case WATCHDOG:
                if(mc.thePlayer == null || mc.thePlayer.ticksExisted < 20) {
                    this.canBlink = true;
                    this.hypixelTimer.reset();
                    this.packets.clear();
                    return;
                }

                if(this.hypixelTimer.hasTimeElapsed(400, true)) {
                    if(!this.packets.isEmpty()) {
                        this.packets.forEach(PacketUtil::sendPacketNoEvent);
                        this.packets.clear();
                    }

                    this.hypixelTimer.reset();
                    if(mc.thePlayer.ticksExisted > 120)
                        this.canBlink = false;
                }
            	break;
            case EXPERIMENTAL:
                if(mc.thePlayer.ticksExisted < 20) {
                    canBlink = true;
                    return;
                }


                int amount = mc.thePlayer.ticksExisted - 500;

                if(hypixelTimer.hasTimeElapsed(Math.max(1200 - amount * 5, 700), true)) {
                    if(!packets.isEmpty()) {
                        packets.forEach(PacketUtil::sendPacketNoEvent);
                        packets.clear();
                        //PlayerUtil.sendClientMessage("Sent packets");
                    }

                    if(mc.thePlayer.ticksExisted > 90) {
                        canBlink = false;
                    }
                }


                if(mc.thePlayer.fallDistance < 1 && Wrapper.getModule(Speed.class).isEnabled()) {
                    e.setOnGround(true);
                }
                break;
            case GHOSTLY:
                if (mc.thePlayer.ticksExisted % 20 == 0) {
                    PacketUtil.sendPacketNoEvent(new C0CPacketInput(Integer.MIN_VALUE, Integer.MAX_VALUE, false, false));
                }
                break;
            case CUBECRAFT:
                e.setOnGround(true);
                PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ), 0, null, 0.0f, (float) Math.random() / 5f, 0.0f));
                break;
            case TUBNET:
                PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE, true));
                break;
            case VULCAN_COMBAT:
                if(mc.thePlayer.ticksExisted < 5) {
                    this.packets.clear();
                    this.updateLagTime();
                }
                if (this.lagTimer.hasTimeElapsed(this.currentDelay, false) && this.packets.size() > this.currentBuffer) {
                    this.updateLagTime();
                    while (this.packets.size() > this.currentBuffer) {
                        PacketUtil.sendPacketNoEvent(this.packets.poll());
                    }
                }
                if (this.conTimer.hasTimeElapsed(this.currentDec, true) && this.currentDec > 0 && !packets.isEmpty()) {
                    PacketUtil.sendPacketNoEvent(this.packets.poll());
                }
            break;
            case NEGATIVITY:
                if(negativityTimer.hasTimeElapsed(500, false)) {
                    if(this.packets.size() <= 50) {
                        if(!this.packets.isEmpty()) {
                            // PlayerUtil.sendClientMessage("Removed packet");
                            this.packets.poll();
                        }
                    } else {
                        for(int i = 0; i < 10; i++) {
                            // PlayerUtil.sendClientMessage("Removed packet (" + i + ")");
                            this.packets.poll();
                        }
                    }
                    this.negativityTimer.reset();
                }
                break;
            case SPARKY:
                if(mc.thePlayer.ticksExisted % 20 == 0) {
                    C17PacketCustomPayload packet = new C17PacketCustomPayload();
                    packet.setChannel("40413eb1");
                    packet.setData(new PacketBuffer(Unpooled.wrappedBuffer(new byte[] { 8, 52, 48, 52, 49, 51, 101, 98, 49 })));
                    PacketUtil.sendPacketNoEvent(packet);
                }
                break;
        }
    };

    private void updateLagTime() {
        this.conTimer.reset();
        this.lagTimer.reset();
        this.currentDelay = (long) MathUtils.randomNumber(5500, 4500);
        this.currentDec = 1500;
        this.currentBuffer = 5;
    }

    public enum Mode {
        WATCHDOG, EXPERIMENTAL, PIT, GHOSTLY, VULCAN_COMBAT, VERUS, CUBECRAFT, TUBNET, NEGATIVITY_PING, NEGATIVITY, SPARKY
    }

}
